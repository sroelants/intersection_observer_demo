{"version":3,"sources":["Search.tsx","Article.tsx","App.tsx","index.tsx"],"names":["Search","handleSubmit","useState","state","setState","className","type","placeholder","onChange","ev","target","value","onClick","Article","pageid","title","snippet","href","dangerouslySetInnerHTML","__html","App","articles","setArticles","searchString","setSearchString","ref","useRef","visible","threshold","rootMargin","intersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","isIntersecting","observe","current","unobserve","useIntersecting","sstr","offset","length","fetch","then","result","json","query","search","catch","err","console","log","newArts","str","map","art","key","ReactDOM","render","document","getElementById"],"mappings":"yTAOMA,G,YAAgC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAChCC,mBAAS,IADuB,mBACnDC,EADmD,KAC5CC,EAD4C,KAG1D,OACE,yBAAKC,UAAU,UACb,2BAAOC,KAAK,OACVD,UAAU,gBACVE,YAAY,mCACZC,SAAU,SAACC,GAAQL,EAASK,EAAGC,OAAOC,QACtCA,MAAOR,IACT,4BAAQE,UAAU,iBAAiBO,QAAS,kBAAMX,EAAaE,KAA/D,aCRAU,G,MAAiC,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACtD,OACE,yBAAKX,UAAU,QACb,uBAAGY,KAAM,uCAAuCH,GAC9C,yBAAKT,UAAU,eACZU,GAEH,yBAAKV,UAAU,gBAAgBa,wBAAyB,CAACC,OAAQH,SCDzE,IA0DeI,EA1DO,WAAO,IAAD,EACMlB,mBAAwB,IAD9B,mBACnBmB,EADmB,KACTC,EADS,OAEcpB,mBAAS,IAFvB,mBAEnBqB,EAFmB,KAELC,EAFK,KAGpBC,EAAiCC,iBAAO,MACxCC,EA8BN,SAAyBF,GACJ,IADoCG,EACrC,uDAD+C,EACjEC,EAAkB,uDAAP,MAAO,EACsB3B,oBAAS,GAD/B,mBACX4B,EADW,KACGC,EADH,KAmBlB,OAhBAC,qBAAU,WAER,IAAMC,EAAW,IAAIC,sBACnB,YAAc,IAAZC,EAAW,oBAACJ,EAAgBI,EAAMC,kBACpC,CAACP,WAAYA,EACXD,UAAWA,IASf,OAPGH,GAEDQ,EAASI,QAAQZ,EAAIa,SAKhB,kBAAML,EAASM,UAAUd,EAAIa,YACnC,IACIR,EAlDOU,CAAgBf,EAAK,EAAG,SAcxC,OAVAO,qBAAU,WAjBZ,IAAuBS,EAAcC,EAkB7Bf,GAAWJ,IAlBIkB,EAmBHlB,EAnBiBmB,EAmBHrB,EAASsB,OAlBjCC,MAAM,wEAAD,OAAyEH,EAAzE,qBAA0FC,EAA1F,qCACVG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAoB,SAAAE,GAAI,OAAKA,EAAaC,MAAMC,UAChDC,OAAqB,SAACC,GAA2B,OAAlBC,QAAQC,IAAIF,GAAa,OAgBpDN,MAAK,SAAAS,GACJhC,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,YAAqBiC,YAG9C,CAAC3B,EAASJ,IAIX,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,UAAlB,oBACA,kBAAC,EAAD,CAAQJ,aAOZ,SAAsBsD,GACpB/B,EAAgB+B,GAEhBjC,EAAY,OATTD,EAASmC,KAAI,SAAAC,GAAG,OAAG,kBAAC,EAAD,eAASC,IAAKD,EAAI3C,QAAY2C,OAClD,yBAAKhC,IAAKA,MCjChBkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.cc5a7630.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./Search.scss\";\n\ninterface SearchProps {\n  handleSubmit: (searchString: string) => void;\n}\n\nconst Search: React.FC<SearchProps> = ({ handleSubmit }) => {\n  const [state, setState] = useState(\"\");\n\n  return (\n    <div className=\"search\">\n      <input type=\"text\" \n        className=\"search__input\"\n        placeholder=\"What do you want to learn about?\"\n        onChange={(ev) => {setState(ev.target.value);}}\n        value={state} />\n      <button className=\"search__button\" onClick={() => handleSubmit(state)}>\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport { Search };\n","import React from \"react\";\nimport \"./Article.scss\";\n\nexport interface ArticleData {\n  pageid: number\n  title: string;\n  snippet: string;\n}\n\nconst Article: React.FC<ArticleData> = ({pageid, title, snippet}) => {\n  return (\n    <div className=\"card\">\n      <a href={\"https://en.wikipedia.org/wiki?curid=\"+pageid}>\n        <div className=\"card__title\">\n          {title}\n        </div>\n        <div className=\"card__snippet\" dangerouslySetInnerHTML={{__html: snippet}}></div>\n      </a>\n    </div>\n  );\n};\n\nexport {Article};\n","import React, {useState, useEffect, useRef} from \"react\";\nimport \"./App.scss\";\nimport {Search} from \"./Search\";\nimport {Article, ArticleData} from \"./Article\";\n\n// Query Wikipedia API and return a promise of Articles\nfunction fetchArticles(sstr: string, offset: number): Promise<ArticleData[]> {\n  return (fetch(`https://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=${sstr}&sroffset=${offset}&format=json&origin=*&srlimit=20`)\n    .then(result => result.json())\n    .then<ArticleData[]>(json => (json as any).query.search)\n    .catch<ArticleData[]>((err) => {console.log(err); return [];})\n  );\n}\n\n\nconst App: React.FC = () => {\n  const [articles, setArticles] = useState<ArticleData[]>([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const ref: React.Ref<HTMLDivElement> = useRef(null);\n  const visible = useIntersecting(ref, 1, \"100px\");\n\n\n  // Fetching more articles and appending them.\n  useEffect(() => {\n    if (visible && searchString) {\n      fetchArticles(searchString, articles.length)\n        .then(newArts => {\n          setArticles(articles => [...articles, ...newArts]);\n        });\n    }\n  }, [visible, searchString]);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">Wikipedia search</header>\n      <Search handleSubmit={handleSubmit} />\n      {articles.map(art =><Article key={art.pageid} {...art} />)}\n      <div ref={ref} />\n    </div>\n  );\n\n\n  function handleSubmit(str: string): void {\n    setSearchString(str);\n    // Reset state when submitting a new search term.\n    setArticles([]);\n  }\n\n  function useIntersecting(ref: React.Ref<HTMLDivElement>, threshold=0,\n    rootMargin=\"0px\") {\n    const [intersecting, setIntersecting] = useState(false);\n\n    useEffect(() => {\n      // When triggered, set loading flag to true.\n      const observer = new IntersectionObserver(\n        ([entry]) => {setIntersecting(entry.isIntersecting);},\n        {rootMargin: rootMargin,\n          threshold: threshold });\n\n      if(ref) {\n        //@ts-ignore ref is guaranteed to be non-null\n        observer.observe(ref.current);\n      }\n\n      // Clean up callback\n      //@ts-ignore ref is guaranteed to be non-null\n      return () => observer.unobserve(ref.current);\n    }, []);\n    return intersecting;\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}